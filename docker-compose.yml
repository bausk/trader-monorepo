version: '3'
services:
  api:
    env_file:
      - ./api/.env
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        env: ${ENV}
        POETRY_VERSION: ${POETRY_VERSION}
    volumes:
      - ./api:/code
    entrypoint: bash -c "scripts/migrate.sh && /usr/bin/supervisord"
    # entrypoint: bash -c "scripts/migrate.sh && python test_migrations.py"
    # entrypoint: bash -c "scripts/migrate.sh && adev runserver test_migrations.py"
    # entrypoint: bash -c "scripts/migrate.sh && gunicorn --reload --bind 0.0.0.0:8000 --worker-class aiohttp.GunicornWebWorker --timeout 3600 --workers 1 --access-logfile - --capture-output test_migrations:app"
    environment:
      - ENV=${ENV}
      - POETRY_VERSION=${POETRY_VERSION}
    ports: 
      - 5000:8000
      # - 5000:5000
      - 5678:5678
      - 5680:5680
    links:
      - postgres
      - timescaledb
      - influxdb
    depends_on:
      - postgres
      - timescaledb
      - influxdb
    restart: on-failure
  tasks:
    env_file:
      - ./api/.env
    build:
      context: ./api
      dockerfile: Dockerfile
      args:
        env: ${ENV}
        POETRY_VERSION: ${POETRY_VERSION}
    volumes:
      - ./api:/code
      - ./frontend:/code/frontend
      - ./etl:/code/etl
    command: ls
    environment:
      - ENV=${ENV}
      - POETRY_VERSION=${POETRY_VERSION}
    ports: 
      - 5001:8000
      - 5679:5679
    links:
      - postgres
      - timescaledb
      - influxdb
    depends_on:
      - postgres
      - timescaledb
      - influxdb
  postgres:
    image: postgres:12
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - 5432:5432
  timescaledb:
    image: timescale/timescaledb:latest-pg12
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - 5433:5432
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
  influxdb:
    image: quay.io/influxdb/influxdb:2.0.0-beta
    ports:
      - 9999:9999
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        env: ${ENV}
    volumes:
      - ./frontend:/app
    ports:
      - 3000:3000
      - 9229:9229
    restart: on-failure
    links:
      - api
    # entrypoint: bash -c 'NODE_OPTIONS="--inspect=0.0.0.0:9229" node node_modules/next/dist/bin/next'
  pgadmin:
    image: dpage/pgadmin4
    links:
      - postgres
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: bausk@bausk.dev
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - 5050:80
    logging:
      driver: none
volumes:
  timescaledb-data:
    driver: local